/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

plugins {
    id 'java'
    id 'io.freefair.lombok' version '8.3'
    id 'checkstyle'
    id 'jacoco'
    id 'war'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

dependencies {

    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    // RestEasy
    implementation "org.jboss.resteasy:resteasy-core:$resteasy_version"
    runtimeOnly "org.jboss.resteasy:resteasy-servlet-initializer:$resteasy_version"

    // https://mvnrepository.com/artifact/jakarta.ws.rs/jakarta.ws.rs-api
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:3.1.0'

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'

    // https://mvnrepository.com/artifact/com.google.inject/guice
    implementation 'com.google.inject:guice:7.0.0'

    testCompileOnly 'org.projectlombok:lombok:1.18.28'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.28'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    // Mockito to mock objects
    testImplementation 'org.mockito:mockito-core:5.5.0'
}

var excludeDirs = ['**/*/module/*', '**/*/model/*']

jacocoTestReport {
    reports {
        html.required
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludeDirs)
        })
        )
    }
}

jacocoTestCoverageVerification {

    dependsOn jacocoTestReport

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludeDirs)
        })
        )
    }

    violationRules {
        doFirst {
            println("CodeCoverage report can be found at file://${project.rootDir}/app/build/reports/jacoco/test/html/index.html")
        }

        rule {
            limit {
                minimum = BigDecimal.valueOf(0.90);
            }
        }
    }
}



tasks.withType(Checkstyle).configureEach {
    ignoreFailures = false
}

tasks.withType(Test).configureEach {
    testLogging.events = ["passed", "skipped", "failed", "standardOut"]

    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

check.dependsOn checkstyleMain
check.dependsOn test
check.dependsOn jacocoTestCoverageVerification

war {
    archiveFileName = 'ROOT.war'
}
